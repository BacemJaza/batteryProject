{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { defaultizeColor } from '../internals/defaultizeColor';\nimport { blueberryTwilightPalette } from '../colorPalettes';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const SeriesContext = /*#__PURE__*/React.createContext({\n  isInitialized: false,\n  data: {}\n});\nif (process.env.NODE_ENV !== 'production') {\n  SeriesContext.displayName = 'SeriesContext';\n}\n/**\r\n * This methods is the interface between what the developer is providing and what components receives\r\n * To simplify the components behaviors, it groups series by type, such that LinePlots props are not updated if some line data are modified\r\n * It also add defaultized values such as the ids, colors\r\n * @param series The array of series provided by devs\r\n * @param colors The color palette used to defaultize series colors\r\n * @returns An object structuring all the series by type.\r\n */\nconst preprocessSeries = (series, colors, seriesFormatters, dataset) => {\n  // Group series by type\n  const seriesGroups = {};\n  series.forEach((seriesData, seriesIndex) => {\n    const {\n      id = `auto-generated-id-${seriesIndex}`,\n      type\n    } = seriesData;\n    if (seriesGroups[type] === undefined) {\n      seriesGroups[type] = {\n        series: {},\n        seriesOrder: []\n      };\n    }\n    if (seriesGroups[type]?.series[id] !== undefined) {\n      throw new Error(`MUI X Charts: series' id \"${id}\" is not unique.`);\n    }\n    seriesGroups[type].series[id] = _extends({\n      id\n    }, defaultizeColor(seriesData, seriesIndex, colors));\n    seriesGroups[type].seriesOrder.push(id);\n  });\n  const formattedSeries = {};\n  // Apply formatter on a type group\n  Object.keys(seriesFormatters).forEach(type => {\n    const group = seriesGroups[type];\n    if (group !== undefined) {\n      formattedSeries[type] = seriesFormatters[type]?.(group, dataset) ?? seriesGroups[type];\n    }\n  });\n  return formattedSeries;\n};\nfunction SeriesContextProvider(props) {\n  const {\n    series,\n    dataset,\n    colors = blueberryTwilightPalette,\n    seriesFormatters,\n    children\n  } = props;\n  const theme = useTheme();\n  const formattedSeries = React.useMemo(() => ({\n    isInitialized: true,\n    data: preprocessSeries(series, typeof colors === 'function' ? colors(theme.palette.mode) : colors, seriesFormatters, dataset)\n  }), [series, colors, theme.palette.mode, seriesFormatters, dataset]);\n  return /*#__PURE__*/_jsx(SeriesContext.Provider, {\n    value: formattedSeries,\n    children: children\n  });\n}\nexport { SeriesContextProvider };","map":{"version":3,"names":["_extends","React","useTheme","defaultizeColor","blueberryTwilightPalette","jsx","_jsx","SeriesContext","createContext","isInitialized","data","process","env","NODE_ENV","displayName","preprocessSeries","series","colors","seriesFormatters","dataset","seriesGroups","forEach","seriesData","seriesIndex","id","type","undefined","seriesOrder","Error","push","formattedSeries","Object","keys","group","SeriesContextProvider","props","children","theme","useMemo","palette","mode","Provider","value"],"sources":["C:/Users/user/Documents/GitHub/batteryProject/battery-app/frontend/node_modules/@mui/x-charts/esm/context/SeriesContextProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { defaultizeColor } from '../internals/defaultizeColor';\r\nimport { blueberryTwilightPalette } from '../colorPalettes';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nexport const SeriesContext = /*#__PURE__*/React.createContext({\r\n  isInitialized: false,\r\n  data: {}\r\n});\r\nif (process.env.NODE_ENV !== 'production') {\r\n  SeriesContext.displayName = 'SeriesContext';\r\n}\r\n/**\r\n * This methods is the interface between what the developer is providing and what components receives\r\n * To simplify the components behaviors, it groups series by type, such that LinePlots props are not updated if some line data are modified\r\n * It also add defaultized values such as the ids, colors\r\n * @param series The array of series provided by devs\r\n * @param colors The color palette used to defaultize series colors\r\n * @returns An object structuring all the series by type.\r\n */\r\nconst preprocessSeries = (series, colors, seriesFormatters, dataset) => {\r\n  // Group series by type\r\n  const seriesGroups = {};\r\n  series.forEach((seriesData, seriesIndex) => {\r\n    const {\r\n      id = `auto-generated-id-${seriesIndex}`,\r\n      type\r\n    } = seriesData;\r\n    if (seriesGroups[type] === undefined) {\r\n      seriesGroups[type] = {\r\n        series: {},\r\n        seriesOrder: []\r\n      };\r\n    }\r\n    if (seriesGroups[type]?.series[id] !== undefined) {\r\n      throw new Error(`MUI X Charts: series' id \"${id}\" is not unique.`);\r\n    }\r\n    seriesGroups[type].series[id] = _extends({\r\n      id\r\n    }, defaultizeColor(seriesData, seriesIndex, colors));\r\n    seriesGroups[type].seriesOrder.push(id);\r\n  });\r\n  const formattedSeries = {};\r\n  // Apply formatter on a type group\r\n  Object.keys(seriesFormatters).forEach(type => {\r\n    const group = seriesGroups[type];\r\n    if (group !== undefined) {\r\n      formattedSeries[type] = seriesFormatters[type]?.(group, dataset) ?? seriesGroups[type];\r\n    }\r\n  });\r\n  return formattedSeries;\r\n};\r\nfunction SeriesContextProvider(props) {\r\n  const {\r\n    series,\r\n    dataset,\r\n    colors = blueberryTwilightPalette,\r\n    seriesFormatters,\r\n    children\r\n  } = props;\r\n  const theme = useTheme();\r\n  const formattedSeries = React.useMemo(() => ({\r\n    isInitialized: true,\r\n    data: preprocessSeries(series, typeof colors === 'function' ? colors(theme.palette.mode) : colors, seriesFormatters, dataset)\r\n  }), [series, colors, theme.palette.mode, seriesFormatters, dataset]);\r\n  return /*#__PURE__*/_jsx(SeriesContext.Provider, {\r\n    value: formattedSeries,\r\n    children: children\r\n  });\r\n}\r\nexport { SeriesContextProvider };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}